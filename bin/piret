#!/usr/bin/env python3

"""
RNA seq pipeline.

wrapper for running RNASeq pipeline

"""

from __future__ import print_function
import os
import sys
import argparse
import luigi
dir_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(os.path.join(dir_path, '..'))
bin_path = os.path.join(lib_path, 'bin')
script_path = os.path.join(lib_path, 'scripts')
sys.path.append(lib_path)
sys.path.append(script_path)
os.environ["PATH"] += os.pathsep + bin_path
os.environ["PATH"] += os.pathsep + script_path
from pypiret import CheckDesign, FaQC, Map, Summ, DGE, srna
from pypiret import Workflows, CheckDependencies
from pypiret.Checks.GFF3 import CheckGFF
from luigi.interface import build




def cmdline_parser():
    """
    Create an argparse instance.

    Combination of different options for this script.
    """
    class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                          argparse.RawDescriptionHelpFormatter):
        """For multiple formatters of argparse."""

        pass

    parser = argparse.ArgumentParser(formatter_class=CustomFormatter,
                                     prog='piret',
                                     description="""RNASeq workflow""",
                                     epilog="""
When selecting both kingdom runs, options that are required for both eukaryotes
and prokaryotes run are required.

Example run for Prokaryotes RNA seq:\n
        piret -d <workdir> -e <design file>  -gp <gff> -i <hisat2 index>
        -k prokarya -m <edgeR/DESeq2> -fp <FASTA>

Example run for Eukaryotes RNA seq:\n
        piret -d <workdir> -e <design file>  -ge <gff> -i <hisat2 index>
        -k eukarya -m <edgeR/DESeq2> -fe <FASTA>

Example run for Both (Eukaryotes and Prokaryotes) RNA seq:\n
        piret -d <workdir> -e <design file>  -gp <gff> -ge <gff>
        -i <hisat2 index> -k both -m <edgeR/DESeq2> -fe <FASTA> -fp <FASTA>
        """)

    parser.add_argument("-c", dest="CPU", help="""number of CPUs/threads to
        run per task. Here, task refers to a processing step.For example,
        number of CPUs specified here will be used for QC, HISAT index and
        mapping steps. Since QC and mapping steps are run for every sample,
        be aware that the total number of CPUs needed are your number of
        samples times CPU specified here.""",
                        required=False, default=1)

    required_args = parser.add_argument_group('required arguments')

    required_args.add_argument("-d", dest="WORKDIR", help="""working directory where all
        output files will be processed and written""", required=True)

    required_args.add_argument("-e", dest="EXPDSN", help="""tab delimited experimental
        design file""", required=True, default=argparse.SUPPRESS)

    required_prok_args = parser.add_argument_group('required arguments (for prokaryotes)')

    required_prok_args.add_argument("-fp", dest="FASTA_PROK", help="""fasta for
        Prokaryotic Reference""", required=False, default=None)

    required_prok_args.add_argument("-gp", dest="GFF_PROK", help="""path to gff
        files for prokaryotic organism, must be a .gff file""", required=False,
                                    default=None)

    required_euk_args = parser.add_argument_group('required arguments (for eukaryotes)')

    required_euk_args.add_argument("-fe", dest="FASTA_EUK", help="""fasta for Eukaryotic Refe
        rence""", required=False, default=None)
    required_euk_args.add_argument("-ge", dest="GFF_EUK", help="""path to gff files for eukar
        yotic organism, must be a .gff file""", required=False, default=None)

    parser.add_argument("-i", dest="INDEX_HISAT", help="""hisat2 index file, it only
        creates index if it does not exist""", required=False, default=None)

    parser.add_argument("--config", help="""config file for setting
        parameters that control each step""", required=False, default=None)

    parser.add_argument("-k", dest="TEST_KINGDOM", help="""which kingdom to test,
        when eukarya or both is chosen, it expects alternative splicing""",
                        required=False, default='prokarya',
                        choices=['prokarya', 'eukarya', 'both'])
    
    parser.add_argument("-m", dest="METHOD", help="""Method to use for detecting
        differentially expressed genes, DESeq2 requires 3 biological replicates
        and ballgown only processes eukaryotes""", required=False,
                        default='balledgeR',
                        choices=['edgeR', 'DESeq2', 'ballgown', 'DEedge',
                                 'DEgown', 'balledgeR', 'all'])
    
    parser.add_argument("--comp", dest="COMPAR", help="""A tsv file containing information regarding the
        groups that are to be compared.""", required=False)

    
    parser.add_argument("--star_db", dest="STARDB", help="""A folder to keep star formatted DB.""",
                        required=False)


    parser.add_argument("-p", dest="P_VALUE", help="""P-Value to consider ifs
        genes are significantly different, default is 0.001""",
                        required=False, default=0.001,
                        type=float)

    parser.add_argument("--scheduler", help="""when specified, will use luigi
        scheduler which allows you to keep track of task using an url
        specified through luigid""", required=False, default=True,
                        action='store_false')

    parser.add_argument("--qsub", help="""run the SGE version of the code, it
        currently is set to SGE with smp""", required=False,
                        action='store_true', default=False)
    
    parser.add_argument("--aligner", dest="ALIGNER", help="""Pick a aligner to be used for the analysis.""",
                        required=False, default='STAR',
                        choices=['STAR', 'HISAT2'])
    
    required_path_args = parser.add_argument_group('required arguments (for pathway and GAGE analysis)')
    parser.add_argument("--pathway", dest="PATHWAY", help="""Generate Pathway heatmaps. Specifying --pathway turns this ON.""",
                        required=False, default=False, action="store_true")
    
    required_path_args.add_argument("--org", dest="ORG_CODE", help="""organism code,
        obtained from KEGG, required for pathway and GAGE analysis.""",
                        required=False, default=None)
    
    parser.add_argument("--gage", dest="GAGE", help="""Perform GAGE analysis. Specifying --gage turns this ON.""",
                        required=False, default=False, action="store_true")

    parser.add_argument("--qc_off", dest="QC_OFF", help="""A flag indicating not to perform QC.""",
                        required=False, default=False, action="store_true")
    
    parser.add_argument("--novel", dest="NOVEL", help="""A flag indicating to find novel regions.""",
                        required=False, default=False, action="store_true")

    parser.add_argument('--version', action='version', version='%(prog)s 0.3')


    return parser


def main():
    """
    Main function.

    All functions are called here.
    """
    parser = cmdline_parser()
    args = parser.parse_args()

    check_input(args=args, parser=parser, workdir=args.WORKDIR) # check if correct options are selected
    check_depen(["samtools", "STAR"]) # check if third party tools are in path
    workdir = os.path.abspath(args.WORKDIR) # Getting absolute path of workdir
    if check_exp_design(args.EXPDSN) is False: #check if experimental design file is OK
        sys.exit("Your experimental design file has formatting problems!")
    
    if args.COMPAR != None: # check if comparison file is correctly formatted
        check_comp(args.COMPAR, args.EXPDSN)
    
    if check_ballgown_method(args.METHOD, args.TEST_KINGDOM) is True: # checking ballgown method
        pass
    
    # if check_star_aligner(args.ALIGNER, args.TEST_KINGDOM) is True: # check if STAR is only used with euks
        # pass

    no_of_jobs = 1
    samp_dic = CheckDesign(args.EXPDSN).extract_sample_fastqs()

    db = check_aligner(aligner=args.ALIGNER, hisat_index=args.INDEX_HISAT,
                 workdir=workdir, star_db=args.STARDB)

    if args.TEST_KINGDOM in ['prokarya', 'eukarya'] and args.qsub is False:
        #TODO: fix pathway and gage analysis, need to turn on corresponding parameters that turns on or off these analysis
        #TODO: checks gff file amd see if it corresponds with the organism code.

        if args.TEST_KINGDOM == "prokarya":
            check_ref(ref_gff=args.GFF_PROK, ref_fasta=args.FASTA_PROK)
            fasta = args.FASTA_PROK
            gff = args.GFF_PROK
        elif args.TEST_KINGDOM == "eukarya":
            check_ref(ref_gff=args.GFF_EUK, ref_fasta=args.FASTA_EUK)
            fasta = args.FASTA_EUK
            gff = args.GFF_EUK
        if check_method(args.METHOD, args.EXPDSN) is True:
            single_seq = Workflows.SingleSeq(fastq_dic=samp_dic,
                                         aligner=args.ALIGNER,
                                         ref_fasta=fasta,
                                         num_cpus=args.CPU,
                                         local_scheduler=args.scheduler,
                                         hisat_index=db,
                                         workdir=workdir,
                                         kingdom=args.TEST_KINGDOM,
                                         no_of_jobs=no_of_jobs,
                                         p_value=args.P_VALUE,
                                         exp_desn_file=args.EXPDSN, 
                                         org_code=args.ORG_CODE,
                                         stardb_dir=db)
            if args.QC_OFF is False:
                run_faqc(fastq_dic=samp_dic, num_cpus=args.CPU, workdir=workdir,
                        local_scheduler=args.scheduler)
                single_seq.create_db(gff=gff) # create database, hisat2 or stardb
                single_seq.map_reads() # map reads, hisat2 or stardb
                single_seq.map_summarize() # summarize the reads               
                if args.NOVEL is True: # if novel regions are to be reported
                    single_seq.extract_pp() # extract properly paired reads
                    single_seq.novel_regions(gff=gff) # find novel regions
                    single_seq.create_new_gff(gff=gff) # create a new GFF file that has novel region info
                    gff=os.path.join(workdir, "updated.gff") # update gff

                single_seq.feature_count(gff=gff) # count
                if args.METHOD == "edgeR": 
                    single_seq.run_edger(gff=gff, pathway=args.PATHWAY,
                                         GAGE=args.GAGE) # find diff expressed gene using edgeR
                elif args.METHOD == "DESeq2":
                    single_seq.run_deseq2(gff,pathway=args.PATHWAY,
                                         GAGE=args.GAGE)   # use DESeq2
                elif args.METHOD == "ballgown":
                    single_seq.merge_stringtie(gff=gff)
                    single_seq.restringtie(gff=gff)
                    single_seq.run_ballgown(gff=gff)
                elif args.METHOD == "DEedge": # use both
                    single_seq.run_edger(gff=gff, pathway=args.PATHWAY,
                                         GAGE=args.GAGE) 
                    single_seq.run_deseq2(gff=gff, pathway=args.PATHWAY,
                                         GAGE=args.GAGE) 
                elif args.METHOD == "DEgown": # use deseq and ballgown
                    single_seq.run_deseq2(gff=gff, pathway=args.PATHWAY,
                                         GAGE=args.GAGE)
                    single_seq.merge_stringtie()
                    single_seq.restringtie(gff=gff)
                    single_seq.run_ballgown(gff=gff)
                elif args.METHOD == "balledgeR": # use ball and edgeR
                    single_seq.run_edger(gff=gff, pathway=args.PATHWAY,
                                         GAGE=args.GAGE)
                    single_seq.merge_stringtie(gff=gff)
                    single_seq.restringtie(gff=gff)
                    single_seq.run_ballgown(gff=gff)
                elif args.METHOD == "all": # use all
                    single_seq.run_edger(gff=gff, pathway=args.PATHWAY,
                                         GAGE=args.GAGE)
                    single_seq.run_deseq2(gff=gff, pathway=args.PATHWAY,
                                         GAGE=args.GAGE)
                    single_seq.merge_stringtie(gff=gff)
                    single_seq.restringtie(gff=gff)
                    single_seq.run_ballgown(gff=gff)
            elif args.QC_OFF is True:
                pass

    elif args.TEST_KINGDOM == 'both' and args.qsub is False:
        check_ref(ref_gff=args.GFF_EUK, ref_fasta=args.FASTA_EUK)
        check_ref(ref_gff=args.GFF_PROK, ref_fasta=args.FASTA_PROK)
        fastas = ",".join([args.FASTA_PROK, args.FASTA_EUK])
        gffs = ",".join([args.GFF_PROK, args.GFF_EUK])
        if check_method(args.METHOD, args.EXPDSN) is True:
            run_faqc(fastq_dic=samp_dic, num_cpus=args.CPU, workdir=workdir,
                     local_scheduler=args.scheduler)
        dual_seq = Workflows.DualSeq(fastq_dic=samp_dic, ref_fastas=fastas,
                                     hisat_index=hisat_index_name,
                                     workdir=workdir,
                                     kingdom=args.TEST_KINGDOM,
                                     no_of_jobs=1,
                                     local_scheduler=args.scheduler,
                                     num_cpus=args.CPU,
                                     exp_desn_file=args.EXPDSN, p_value=args.P_VALUE
                                     )

        dual_seq.create_hisat_index()
        dual_seq.map_hisat()
        dual_seq.split_prokeuk()
        dual_seq.summarize_map()
        dual_seq.novel_regions()
        dual_seq.compile_gff()
        dual_seq.feature_counts()
        dual_seq.merge_stringties()
        if args.METHOD == "edgeR":
            dual_seq.run_edger()
        elif args.METHOD == "DESeq2":
            dual_seq.run_deseq2()
        elif args.METHOD == "ballgown":
            dual_seq.restringtie()
            dual_seq.run_ballgown()
        elif args.METHOD == "DEedge":
            dual_seq.run_edger()
            dual_seq.run_deseq2()
        elif args.METHOD == "DEgown":
            dual_seq.run_deseq2()
            dual_seq.restringtie()
            dual_seq.run_ballgown()
        elif args.METHOD == "balledgeR":
            dual_seq.run_edger()
            dual_seq.restringtie()
            dual_seq.run_ballgown()
        elif args.METHOD == "all":
            dual_seq.run_edger()
            dual_seq.run_deseq2()
            dual_seq.restringtie()
            dual_seq.run_ballgown()


def check_input(args, parser, workdir):
    """ A function to check if complimentary options are selected. """
    
    # for prokarya
    if args.TEST_KINGDOM == "prokarya" and args.FASTA_PROK is None:
        parser.error("-k prokarya requires fasta file to be specified using -fp")
    elif args.TEST_KINGDOM == "prokarya" and args.GFF_PROK is None:
        parser.error("-k prokarya requires gff file to be specified using -gp")
    if args.TEST_KINGDOM == "prokarya" and args.FASTA_EUK != None:
        parser.error("-k prokarya does not need eukarya fasta -fe to be specified")
    if args.TEST_KINGDOM == "prokarya" and args.GFF_EUK != None:
        parser.error("-k prokarya does not need eukarya gff -ge to be specified")
    # for eukarya
    if args.TEST_KINGDOM == "eukarya" and args.FASTA_EUK is None:
        parser.error("-k eukarya requires fasta file to be specified using -fe")
    elif args.TEST_KINGDOM == "eukarya" and args.GFF_EUK is None:
        parser.error("-k eukarya requires gff file to be specified using -ge")
    if args.TEST_KINGDOM == "eukarya" and args.FASTA_PROK != None:
        parser.error("-k eukarya does not need eukarya fasta -fe to be specified")
    if args.TEST_KINGDOM == "eukarya" and args.GFF_PROK != None:
        parser.error("-k eukarya does not need prokarya gff -gp to be specified")
    # for both
    if args.TEST_KINGDOM == "both":
        if args.GFF_PROK is None or args.GFF_EUK is None or args.FASTA_EUK is None or args.FASTA_PROK is None:
            parser.error("-k both needs fasta and gff file specified for both prokarya and eukarya")
    # for pathway
    if args.PATHWAY is True or args.GAGE is True:
        if args.ORG_CODE is None:
            parser.error("need to specify an organism code")


def check_aligner(aligner, hisat_index, workdir, star_db):
    if aligner == "HISAT2":
        if hisat_index is None:
            hisat_index_name = os.path.join(workdir, "hisat_index")
        else:
            hisat_index_name = hisat_index
        return hisat_index_name
    elif aligner == "STAR":
        if star_db is None:
            new_stardb = os.path.join(workdir, "stardb")
            if os.path.exists(new_stardb) is False:
                os.makedirs(new_stardb)
            return new_stardb
        else:
            os.makedirs(star_db)
            return star_db
            

def check_comp(comp_file, exp_design):
    """Check if comparison file is tsv and the groups in it actually
    corresponds to one mentioned in experimental design file."""
    
    group = []
    with open(exp_design, 'r') as e:
        elines = e.readlines()
        for line in elines:
            group.append(line.split("\t")[2].rstrip())
    grp = list(set(group))
    with open(comp_file, 'r') as c:
        clines = c.readlines()
        for line in clines:
            if len(line.split("\t")) == 2:
                for l in line.split("\t"):
                    if l in grp:
                        pass
                    else:
                        print(*grp, sep="\t")
                        sys.exit("'%s' not found design file!" %l)
            else:
                sys.exit("Comparison file is not correct. Its a two column tab delimited file.")
            

def check_depen(tool_list):
    """A function that checks the list of tool are in path or not."""
    for tool in tool_list:
        check = CheckDependencies(package=tool)
        check.check_thirdparty()

    
def run_faqc(fastq_dic, num_cpus, workdir, local_scheduler):
    """A function that calls the FaQC function.

    it returns QCed files in respective directory
    """
    build([FaQC.SummarizeQC(fastq_dic=fastq_dic,
                            num_cpus=num_cpus,
                            workdir=workdir)],
          local_scheduler=local_scheduler,
          workers=1)



def check_exp_design(exp_design_file):
    """A function that checks different aspects of experimental des. file.

    it returns True if all checked conditions are True. This is the first step
    of the pipeline.
    """
    exp_desn = CheckDesign(exp_design_file)
    if all([exp_desn.tab(),
            exp_desn.header(),
            exp_desn.sample_name(),
            exp_desn.file_name(),
            exp_desn.group_name(),
            exp_desn.sample_name(),
            exp_desn.fastq_exists()]) is True:
        return True


def check_gff(gff_file):
    """A function that checks gff file.

    it returns True if all checked conditions are True. This is one of
    the first stepof the pipeline.
    """
    gff = CheckGFF(gff_file)
    if all([gff.size(), gff.check_id(), gff.check_unique_id()]) is True:
        return True
    else:
        return False

def check_index_file(indexfile):
    """Check if index file is present."""
    hisat_file = indexfile + '.6.ht2l'
    if os.path.exists(hisat_file):
        return True
    else:
        return False


def check_ballgown_method(method, kingdom):
    """Only allow ballgown to be picked for both or eukarya."""
    if method in ('ballgown', 'balledgeR', 'DEgown', 'all') and kingdom == "prokarya":
        sys.exit("Ballgown does not work for prokaryotic genomes, pick method that does not have ballgown!")
    else:
        return True


def check_star_aligner(method, kingdom):
    """Only allow STAR aligner to work for eukarya only."""
    if method in ('STAR') and kingdom == "prokarya":
        sys.exit("STAR does not work well for prokaryotic genomes, pick HISAT2!")
    else:
        return True

def check_method(method, exp_design_file):
    """Based on chosen method, if enough samples are present."""
    exp_desn = CheckDesign(exp_design_file)
    if method in ('DESeq2', 'all', 'DEgown', 'DEedge') and exp_desn.sample_suff(method='Deseq'):
        return True
    elif method in ('edgeR', 'ballgown', 'balledgeR'):
        return True
    else:
        sys.exit("DESeq2 requires at least three replicates within a group!")


def check_ref(ref_fasta=None, ref_gff=None):
    """Check if references are present."""
    if ',' in ref_fasta:
        if all([os.path.exists(f) for f in ref_fasta.split(",")]) is True:
            pass
        else:
            sys.exit("One of the reference fasta do not exist!")
    if ',' in ref_gff:
        if all([os.path.exists(f) for f in ref_gff.split(",")]) is True:
            return True
        else:
            sys.exit("One of the reference gff do not exist!")
    else:
        if os.path.exists(ref_gff) and os.path.exists(ref_fasta):
            if check_gff(ref_gff) is True:
                return True
        else:
            if os.path.exists(ref_fasta) is False:
                exit_message = ' '.join(("Reference FASTA", ref_fasta, "does not exist!"))
                sys.exit(exit_message)
            elif os.path.exists(ref_gff) is False:
                exit_message = ' '.join(("Reference GFF", ref_gff, "does not exist!"))



if __name__ == '__main__':
    main()
